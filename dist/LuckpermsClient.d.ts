import { LuckpermsClientOptions, LuckpermsRestClient } from "./LuckpermsRestClient";
import { Action } from "./models/Action";
import { Group } from "./models/Group";
import { Metadata } from "./models/Metadata";
import { NewNode } from "./models/NewNode";
import { NodeMap } from "./models/NodeMap";
import { User } from "./models/User";
import { UUID } from "./models/UUID";
import { CreateUserInput } from "./schemas/CreateUserInput";
import { RunCustomPermissionCheckInput } from "./schemas/RunCustomPermissionCheckInput";
import { RunPermissionCheckOutput } from "./schemas/RunPermissionCheckOutput";
import { SearchGroupsOutput } from "./schemas/SearchGroupsOutput";
import { SearchUsersGroupsInput } from "./schemas/SearchUsersGroupsInput";
import { SearchUsersOutput } from "./schemas/SearchUsersOutput";
import { TrackPromoteDemoteInput } from "./schemas/TrackPromoteDemoteInput";
import { TrackPromoteDemoteOutput } from "./schemas/TrackPromoteDemoteOutput";
import { UpdateUserInput } from "./schemas/UpdateUserInput";
export declare class LuckpermsClient {
    restClient: LuckpermsRestClient;
    constructor(options: LuckpermsClientOptions);
    getUsers(): Promise<UUID[]>;
    createUser(details: CreateUserInput): Promise<User>;
    searchUsers(query: SearchUsersGroupsInput): Promise<SearchUsersOutput>;
    getUser(uuid: UUID): Promise<User>;
    updateUser(uuid: UUID, update: UpdateUserInput): Promise<void>;
    deleteUser(uuid: UUID): Promise<void>;
    getUserNodes(uuid: UUID): Promise<NodeMap>;
    addUserNode(uuid: UUID, node: NewNode): Promise<NodeMap>;
    addUserNodes(uuid: UUID, nodes: NewNode[]): Promise<NodeMap>;
    replaceUserNodes(uuid: UUID, nodes: NewNode[]): Promise<NodeMap>;
    deleteUserNodes(uuid: UUID, nodes: NewNode[]): Promise<void>;
    getUserMetadata(uuid: UUID): Promise<Metadata>;
    runUserPermissionCheck(uuid: UUID, permission: string): Promise<RunPermissionCheckOutput>;
    runCustomUserPermissionCheck(uuid: UUID, options: RunCustomPermissionCheckInput): Promise<RunPermissionCheckOutput>;
    promoteUser(uuid: UUID, trackRequest: TrackPromoteDemoteInput): Promise<TrackPromoteDemoteOutput>;
    demoteUser(uuid: UUID, trackRequest: TrackPromoteDemoteInput): Promise<TrackPromoteDemoteOutput>;
    getGroups(): Promise<string>;
    createGroup(name: string): Promise<string>;
    searchGroups(query: SearchUsersGroupsInput): Promise<SearchGroupsOutput>;
    getGroup(group: string): Promise<Group>;
    deleteGroup(group: string): Promise<void>;
    getGroupNodes(group: string): Promise<NodeMap>;
    addGroupNode(group: string, node: NewNode): Promise<NodeMap>;
    addGroupNodes(group: string, nodes: NewNode[]): Promise<NodeMap>;
    replaceGroupNodes(group: string, nodes: NewNode[]): Promise<NodeMap>;
    deleteGroupNodes(group: string, nodes: NewNode[]): Promise<void>;
    getGroupMetadata(group: string): Promise<Metadata>;
    runGroupPermissionCheck(group: string, permission: string): Promise<RunPermissionCheckOutput>;
    runCustomGroupPermissionCheck(group: string, options: RunCustomPermissionCheckInput): Promise<RunPermissionCheckOutput>;
    submitAction(action: Action): Promise<void>;
}
